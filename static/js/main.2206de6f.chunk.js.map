{"version":3,"sources":["pages/Board/components/Card/Card.tsx","pages/Board/components/List/List.tsx","pages/Board/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","title","className","makeCardList","cards","map","card","id","toString","List","Board","props","state","lists","this","list","href","makeLists","Component","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0WAOaA,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAA6B,oBAAIC,UAAU,OAAd,SAAsBD,K,MCDtF,SAASE,EAAaC,GACpB,OAAOA,EAAMC,KAAI,SAACC,GAAD,OAAU,cAAC,EAAD,CAA+BL,MAAOK,EAAKL,OAAhCK,EAAKC,GAAGC,eAGzC,IAAMC,EAAkB,SAAC,GAAD,IAAGR,EAAH,EAAGA,MAAOG,EAAV,EAAUA,MAAV,OAC7B,0BAASF,UAAU,OAAnB,UACE,oBAAIA,UAAU,cAAd,SAA6BD,IAC7B,oBAAIC,UAAU,cAAd,SAA6BC,EAAaC,KAC1C,wBAAQF,UAAU,gBAAlB,iGCJiBQ,G,wDACnB,WAAYC,GAA+B,IAAD,8BACxC,cAAMA,IAEDC,MAAQ,CACXX,MAAO,qGACPY,MAAO,CACL,CACEN,GAAI,EACJN,MAAO,iCACPG,MAAO,CACL,CAAEG,GAAI,EAAGN,MAAO,iEAChB,CAAEM,GAAI,EAAGN,MAAO,yFAChB,CAAEM,GAAI,EAAGN,MAAO,kGAGpB,CACEM,GAAI,EACJN,MAAO,0DACPG,MAAO,CAAC,CAAEG,GAAI,EAAGN,MAAO,uGAE1B,CACEM,GAAI,EACJN,MAAO,6CACPG,MAAO,CACL,CAAEG,GAAI,EAAGN,MAAO,yFAChB,CAAEM,GAAI,EAAGN,MAAO,0GAzBgB,E,6CAgC1C,WAEE,OADkBa,KAAKF,MAAfC,MACKR,KAAI,SAACU,GAAD,OAAU,cAAC,EAAD,eAAUA,S,oBAGvC,WAAwB,IACdd,EAAUa,KAAKF,MAAfX,MACR,OACE,0BAASC,UAAU,QAAnB,UACE,yBAAQA,UAAU,gBAAlB,UACE,mBAAGc,KAAK,IAAId,UAAU,mBAAtB,4CAGA,oBAAIA,UAAU,eAAd,SAA8BD,OAEhC,sBAAKC,UAAU,cAAf,UACGY,KAAKG,YACN,wBAAQf,UAAU,aAAlB,6G,GAlDyBgB,cCcpBC,MAnBf,WACE,OACE,qBAAKjB,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOkB,KAAK,IAAZ,SACE,cAAC,EAAD,QAGJ,cAAC,IAAD,UACE,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,cAAC,EAAD,cCFGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2206de6f.chunk.js","sourcesContent":["import React, { FC, ReactElement } from 'react';\nimport './card.scss';\n\ninterface CardProps {\n  title: string;\n}\n\nexport const Card: FC<CardProps> = ({ title }): ReactElement => <li className=\"card\">{title}</li>;\n","import React, { FC, ReactElement } from 'react';\nimport { ICard } from '../../../../common/interfaces/ICard';\nimport { IList } from '../../../../common/interfaces/IList';\nimport { Card } from '../Card/Card';\nimport './list.scss';\n\nfunction makeCardList(cards: ICard[]): ReactElement[] {\n  return cards.map((card) => <Card key={card.id.toString()} title={card.title} />);\n}\n\nexport const List: FC<IList> = ({ title, cards }): ReactElement => (\n  <section className=\"list\">\n    <h2 className=\"list__title\">{title}</h2>\n    <ul className=\"list__cards\">{makeCardList(cards)}</ul>\n    <button className=\"list__btn btn\">Добавить карту</button>\n  </section>\n);\n","import React, { Component, ReactElement } from 'react';\nimport { IList } from '../../common/interfaces/IList';\nimport { List } from './components/List/List';\nimport './board.scss';\n\ninterface BoardState {\n  title: string;\n  lists: IList[];\n}\n\nexport default class Board extends Component<Record<string, never>, BoardState> {\n  constructor(props: Record<string, never>) {\n    super(props);\n\n    this.state = {\n      title: 'Моя тестовая доска',\n      lists: [\n        {\n          id: 1,\n          title: 'Планы',\n          cards: [\n            { id: 1, title: 'помыть кота' },\n            { id: 2, title: 'приготовить суп' },\n            { id: 3, title: 'сходить в магазин' },\n          ],\n        },\n        {\n          id: 2,\n          title: 'В процессе',\n          cards: [{ id: 4, title: 'посмотреть сериал' }],\n        },\n        {\n          id: 3,\n          title: 'Сделано',\n          cards: [\n            { id: 5, title: 'сделать домашку' },\n            { id: 6, title: 'погулять с собакой' },\n          ],\n        },\n      ],\n    };\n  }\n\n  makeLists(): ReactElement[] {\n    const { lists } = this.state;\n    return lists.map((list) => <List {...list} />);\n  }\n\n  render(): ReactElement {\n    const { title } = this.state;\n    return (\n      <section className=\"board\">\n        <header className=\"board__header\">\n          <a href=\"/\" className=\"board__home-link\">\n            Домой\n          </a>\n          <h1 className=\"board__title\">{title}</h1>\n        </header>\n        <div className=\"board__main\">\n          {this.makeLists()}\n          <button className=\"board__btn\">Добавить список</button>\n        </div>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Board from './pages/Board/Board';\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\">\n            <Board />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route path=\"/board\">\n            <Board />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}